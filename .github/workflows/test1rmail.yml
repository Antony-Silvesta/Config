name: Selenium Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: List all files and paths
      run: |
        echo "Listing all files and paths in the repository:"
        find . -type f

    - name: Check held packages
      run: |
        sudo apt-mark showhold

    - name: Clean up apt cache
      run: |
        sudo apt-get clean
        sudo apt-get update

    - name: Fix broken packages
      run: |
        sudo apt-get install -f

    - name: Remove conflicting Docker packages
      run: |
        sudo apt-get remove --purge -y docker docker-engine docker.io containerd containerd.io

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Verify Docker Compose installation

    - name: Set up Docker Compose
      run: |
        docker-compose up -d

    - name: Wait for MongoDB to be ready
      run: |
        until nc -z localhost 27017; do
          echo "Waiting for MongoDB to start..."
          sleep 1
        done
        echo "MongoDB is ready"

    - name: Run Selenium tests and generate HTML report
      id: run_tests
      run: |
          pytest --html=report.html --self-contained-html > pytest_test_results.log || exit 0
          cat pytest_test_results.log 

    - name: Check if tests passed or failed
      run: |
        if grep -q "FAILED" pytest_test_results.log; then
          echo "Tests failed"
          echo "TESTS_PASSED=false" >> $GITHUB_ENV
        else
          echo "Tests passed"
          echo "TESTS_PASSED=true" >> $GITHUB_ENV
        fi

    - name: Archive Pytest Results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results
        path: pytest_test_results.log

    - name: Archive HTML Test Report
      uses: actions/upload-artifact@v3
      with:
        name: selenium-test-report
        path: report.html

    - name: Archive Pytest Results (with check)
      run: |
        if [ -f "pytest_test_results.log" ]; then
          echo "Pytest results archived"
        else
          echo "Failed to archive Pytest results"
          exit 1
        fi

    - name: Archive HTML Test Report (with check)
      run: |
        if [ -f "report.html" ]; then
          echo "HTML test report archived"
        else
          echo "Failed to archive HTML test report"
          exit 1
        fi

    - name: Send Email Notification
      run: |
          python send_email_notification.py ${{ steps.test_run.outcome }}
      env:
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}  # Store sender email in GitHub secrets
          SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}  # Store sender password in GitHub secrets
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}  # Store recipient email in GitHub secrets
      
   
